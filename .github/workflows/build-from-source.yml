name: Build immortalwrt from source

on:
  workflow_dispatch:
    inputs:
      REPO_BRANCH:
        type: choice
        description: "Select compile branch"
        required: true
        options:
          - openwrt-23.05
          - openwrt-24.10
          - master
        default: master
      PLATFORM:
        type: choice
        description: "Select compile platform"
        required: true
        options:
          - apm821xx-nand
          - apm821xx-sata
          - armsr-armv7
          - armsr-armv8
          - at91-sam9x
          - at91-sama5
          - at91-sama7
          - ath79-generic
          - ath79-mikrotik
          - ath79-nand
          - ath79-tiny
          - bcm27xx-bcm2708
          - bcm27xx-bcm2709
          - bcm27xx-bcm2710
          - bcm27xx-bcm2711
          - bcm27xx-bcm2712
          - bcm47xx-generic
          - bcm47xx-legacy
          - bcm47xx-mips74k
          - bcm4908-generic
          - bcm53xx-generic
          - bmips-bcm6318
          - bmips-bcm63268
          - bmips-bcm6328
          - bmips-bcm6358
          - bmips-bcm6362
          - bmips-bcm6368
          - d1-generic
          - gemini-generic
          - imx-cortexa53
          - imx-cortexa7
          - imx-cortexa9
          - ipq40xx-chromium
          - ipq40xx-generic
          - ipq40xx-mikrotik
          - ipq806x-chromium
          - ipq806x-generic
          - ixp4xx-generic
          - kirkwood-generic
          - lantiq-ase
          - lantiq-xrx200
          - lantiq-xrx200_legacy
          - lantiq-xway
          - lantiq-xway_legacy
          - layerscape-armv7
          - layerscape-armv8_64b
          - loongarch64-generic
          - malta-be
          - malta-be64
          - malta-le
          - malta-le64
          - mediatek-filogic
          - mediatek-mt7622
          - mediatek-mt7623
          - mediatek-mt7629
          - mpc85xx-p1010
          - mpc85xx-p1020
          - mpc85xx-p2020
          - mvebu-cortexa53
          - mvebu-cortexa72
          - mvebu-cortexa9
          - mxs-generic
          - octeon-generic
          - omap-generic
          - pistachio-generic
          - qoriq-generic
          - qualcommax-ipq807x
          - ramips-mt7620
          - ramips-mt7621
          - ramips-mt76x8
          - ramips-rt288x
          - ramips-rt305x
          - ramips-rt3883
          - realtek-rtl838x
          - realtek-rtl839x
          - realtek-rtl930x
          - realtek-rtl931x
          - rockchip-armv8
          - sifiveu-generic
          - starfive-generic
          - stm32-stm32mp1
          - sunxi-cortexa53
          - sunxi-cortexa7
          - sunxi-cortexa8
          - tegra-generic
          - x86-64
          - x86-generic
          - x86-geode
          - x86-legacy
          - zynq-generic
        default: mediatek-filogic
      # PREBUILD_TOOLCHAIN:
      #   type: choice
      #   description: "Use prebuild toolchain"
      #   required: false
      #   options:
      #     - 'yes'
      #     - 'no'
      #   default: 'no'

#  schedule:
#    - cron: 0 8 */5 * *

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/scripts/ubuntu2204-depends)
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

        CREATE_TIME="$(curl "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r .created_at)"
        BUILD_TIME_1="$(TZ=Asia/Shanghai date -d "$CREATE_TIME" +"%Y-%m-%d %H:%M:%S CST(+08:00)")"
        echo "BUILD_TIME_1=$BUILD_TIME_1" >> $GITHUB_ENV
        BUILD_TIME_2="$(TZ=Asia/Shanghai date -d "$CREATE_TIME" +"%Y%m%d-%H%M%S")"
        echo "BUILD_TIME_2=$BUILD_TIME_2" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone https://github.com/immortalwrt/immortalwrt.git -b ${{ inputs.REPO_BRANCH }} --depth=1 immortalwrt
        ln -sf /mnt/workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt

    - name: Load custom configuration
      run: |
        PLATFORM_PATH=$(echo "${{ inputs.PLATFORM }}" | sed 's/-/\//g')
        echo "PLATFORM_PATH=$PLATFORM_PATH" >> $GITHUB_ENV

        cd immortalwrt
        if [ "${{ inputs.REPO_BRANCH }}" == "openwrt-23.05" ]; then
          wget -O .config https://downloads.immortalwrt.org/releases/23.05.4/targets/$PLATFORM_PATH/config.buildinfo
        elif [ "${{ inputs.REPO_BRANCH }}" == "openwrt-24.10" ]; then
          wget -O .config https://downloads.immortalwrt.org/releases/24.10.0/targets/$PLATFORM_PATH/config.buildinfo
        elif [ "${{ inputs.REPO_BRANCH }}" == "master" ]; then
          wget -O .config https://downloads.immortalwrt.org/snapshots/targets/$PLATFORM_PATH/config.buildinfo
        fi

    # - name: Set up prebuild toolchain
    #   if: inputs.PREBUILD_TOOLCHAIN == 'yes' && !cancelled()
    #   run: |
    #     if [ "${{ inputs.REPO_BRANCH }}" == "openwrt-23.05" ]; then
    #       wget https://downloads.immortalwrt.org/releases/23.05.4/targets/${{ env.PLATFORM_PATH }}/immortalwrt-toolchain-23.05.4-${{ inputs.PLATFORM }}_gcc-12.3.0_musl.Linux-x86_64.tar.xz
    #       tar -Jxvf *.tar.xz
    #       rm -rf *.tar.xz
    #     elif [ "${{ inputs.REPO_BRANCH }}" == "openwrt-24.10" ]; then
    #       wget https://downloads.immortalwrt.org/releases/24.10.0/targets/${{ env.PLATFORM_PATH }}/immortalwrt-toolchain-24.10.0-${{ inputs.PLATFORM }}_gcc-13.3.0_musl.Linux-x86_64.tar.zst
    #       tar --zstd -xvf *.tar.zst
    #       rm -rf *.tar.zst
    #     elif [ "${{ inputs.REPO_BRANCH }}" == "master" ]; then
    #       wget https://downloads.immortalwrt.org/snapshots/targets/${{ env.PLATFORM_PATH }}/immortalwrt-toolchain-${{ inputs.PLATFORM }}_gcc-13.3.0_musl.Linux-x86_64.tar.zst
    #       tar --zstd -xvf *.tar.zst
    #       rm -rf *.tar.zst
    #     fi
    #     TOOLCHAIN_PATH=$(find "$GITHUB_WORKSPACE" -name "immortalwrt-toolchain-*" | head -n 1)

    #     cd immortalwrt
    #     ./scripts/ext-toolchain.sh --toolchain $TOOLCHAIN_PATH/toolchain-*/bin --overwrite-config --config ${{ env.PLATFORM_PATH }}

    - name: Update and install feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download package
      run: |
        cd immortalwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd immortalwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      with:
        name: immortalwrt_bin_${{ inputs.PLATFORM }}_${{ env.BUILD_TIME_2 }}
        path: immortalwrt/bin

    - name: Organize files
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      with:
        name: immortalwrt_firmware_${{ inputs.PLATFORM }}_${{ env.BUILD_TIME_2 }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release informations
      run: |
        if [ "${{ inputs.REPO_BRANCH }}" == "openwrt-23.05" ]; then
          BUILD_VERSION="23.05.4"
        elif [ "${{ inputs.REPO_BRANCH }}" == "openwrt-24.10" ]; then
          BUILD_VERSION="24.10.0"
        elif [ "${{ inputs.REPO_BRANCH }}" == "master" ]; then
          BUILD_VERSION="SNAPSHOTS"
        fi

        RELEASE_TAG="ImmortalWrt-$BUILD_VERSION-${{ inputs.PLATFORM }}-${{ env.BUILD_TIME_2 }}"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

        cat <<EOF | sed -E 's/^  //' > Release.md
          CI ImmortalWrt $BUILD_VERSION ${{ inputs.PLATFORM }} ${{ env.BUILD_TIME_1 }}

          Build time: \`${{ env.BUILD_TIME_1 }}\`
          Build version: ImmortalWrt $BUILD_VERSION
          Build platform: \`${{ inputs.PLATFORM }}\`
          Login: \`192.168.1.1\`
          Username: \`root\`
          Password: \`none\`
        EOF

        echo "RELEASE_NAME=$(head --line=1 Release.md)" >> $GITHUB_ENV
        tail --line=+2 Release.md > Body.md
    
    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ env.RELEASE_NAME }}
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: Body.md
        files: ${{ env.FIRMWARE }}/*
